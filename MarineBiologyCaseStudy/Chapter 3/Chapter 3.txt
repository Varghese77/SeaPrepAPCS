Roy MathewChapter 3 QuestionsMarch 22nd 2015 ~10:00 a.mAnalysis Question Set 1:	1. No because any class can have a reference of the fish by calling the environment's allObjects method.   	2. One advantage to returning a Boolean is that later down the road when modifying the behavior of a fish (such as making it freeze when it sees a shark) so that this Boolean could be used to determine behavior.  This would specifically be used as a conditional test in the act method before it invokes the move method. There are no disadvantages except that right now the Boolean does nothing and thus wastes resources. Analysis Question Set 2:	1. I think that the program should have separate breed and die methods because that way multiple functions aren't grouped into the act or move methods. I think that after breed and die methods were created, these methods would then need to be referred to from the act or die methods. 	2. The tests for breeding and dying should be in their respective methods because that way each method is trying to accomplish only one set of actions and is more consistent.  This keeps the code more simple and because it is simple, there is no reason not to. 	3. The advantage to this code is that the test is broken down into two simple steps and makes the code easier to follow. The disadvantage is that technically the program doesn't need to initialize a boolean and could call the method directly in the if statement and as a result, the code isn't as succinct as some might like it. Exercise Set 1:	1. Program tested. Fish breed and die as expected from the code. 	2. Even though the seed is the same, the fish movements aren't the same because the added code gives different functionality to this simulation than the other one. Thus while this simulation was "seeded", the program is a completely different one. In this simulation fish can breed and die based off of randomly generated numbers means that the seed also affects these and both effect the placement of fish(s) resulting in different fixed movement patterns. 	3. The generateChild method was updated to give new colors to the children based off of Math.random(). The movement of the fish is the same but now the children generated all have different colors then when the color was the constant color of the parent. Also even though the program is set to a fixed seed the children differ in color each time a simulation is run. This could be due to the fact that the Math.random() doesn't interact with the seed at all. 	4. Initialize and constructors updated!	5. When a fish is constructed with a breeding probability of 0.05 and a probability of dying of 0.1, then it is twice more likely to breed than to die. When both values are set to 0, then the fish will never breed or die and behaves the same as in chapter 1 and 2. 	6. Private field numOfTimesBred created in the fish object.  It is initialized to 0 in the initialize method and incremented in the breed method before returning true.  The lowest time a fish bred in demo2 was 0 times and the largest time was 2 times. This is what I would expect because most fish have a small time breeding (maximum of 25%) while in every fish the probability of dying is always larger (except for f4). 	7.  The age field was initialized in the initialize method and displayed in the debug output display after the fish is removed from dying. The minimum age of a fish was 1 and the maximum I saw was 12. This is what I would expect because most of the fish's ages were around 3-6 and most fish had either a 1/5 chance of dying which means that on average a fish should die after the 5th movement. 	8. Behavior updated. probsofBreeding initially set t (1.0/3.0) and in the actual breed method an If statement is placed that will return false if age is less than 3.  probsOfDying is initially set to 0 but is updated at the start of the act method to keep in sync. 